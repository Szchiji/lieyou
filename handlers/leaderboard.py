import logging
import math
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown  # <-- Ê†∏ÂøÉ‰øÆÂ§çÔºöÂØºÂÖ•‚ÄúËΩ¨‰πâ‚ÄùÊä§Ë∫´Á¨¶
from database import db_cursor

logger = logging.getLogger(__name__)

PAGE_SIZE = 10

async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE, board_type: str, page: int = 1):
    is_callback = update.callback_query is not None
    try:
        async with db_cursor() as cur:
            if board_type == 'top':
                title = "üèÜ Êé®ËçêÊ¶ú üèÜ"
                order_col = "recommend_count"
                count_col_name = "Ê¨°Êé®Ëçê"
            else: # 'bottom'
                title = "‚ò†Ô∏è ÊãâÈªëÊ¶ú ‚ò†Ô∏è"
                order_col = "block_count"
                count_col_name = "Ê¨°ÊãâÈªë"
            
            total_users_record = await cur.fetchrow(f"SELECT COUNT(*) FROM users WHERE {order_col} > 0")
            users = await cur.fetch(f"SELECT full_name, username, {order_col} FROM users WHERE {order_col} > 0 ORDER BY {order_col} DESC, id ASC LIMIT {PAGE_SIZE} OFFSET {(page - 1) * PAGE_SIZE}")

        total_users = total_users_record['count']
        total_pages = math.ceil(total_users / PAGE_SIZE) if total_users > 0 else 1

        text = f"*{title}*\n\n"
        if not users:
            text += "Ëøô‰∏™ÊéíË°åÊ¶úÊòØÁ©∫ÁöÑ„ÄÇ"
        else:
            start_num = (page - 1) * PAGE_SIZE
            user_lines = []
            for i, u in enumerate(users):
                # --- Ê†∏ÂøÉ‰øÆÂ§çÔºö‰∏∫ÊéíË°åÊ¶ú‰∏äÁöÑÊØè‰∏™ÂêçÂ≠óÈÉΩ‰Ω©Êà¥‰∏ä‚ÄúÊä§Ë∫´Á¨¶‚Äù ---
                safe_name = escape_markdown(u['full_name'], version=2)
                safe_username = escape_markdown(u['username'], version=2)
                line = f"{i + start_num + 1}\\. {safe_name} \\(@{safe_username}\\) \\- *{u[order_col]}* {count_col_name}"
                user_lines.append(line)
            text += "\n".join(user_lines)

        keyboard = []
        row = []
        if page > 1: row.append(InlineKeyboardButton("‚¨ÖÔ∏è ‰∏ä‰∏ÄÈ°µ", callback_data=f"leaderboard_{board_type}_{page - 1}"))
        row.append(InlineKeyboardButton(f"Á¨¨ {page}/{total_pages} È°µ", callback_data="leaderboard_noop"))
        if page < total_pages: row.append(InlineKeyboardButton("‰∏ã‰∏ÄÈ°µ ‚û°Ô∏è", callback_data=f"leaderboard_{board_type}_{page + 1}"))
        if row: keyboard.append(row)
        reply_markup = InlineKeyboardMarkup(keyboard)

        # --- Ê†∏ÂøÉ‰øÆÂ§çÔºö‰ΩøÁî®Êõ¥ÂÆâÂÖ®ÁöÑ MarkdownV2 Ê†ºÂºè ---
        if is_callback:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='MarkdownV2')

    except Exception as e:
        logger.error(f"ÁîüÊàêÊéíË°åÊ¶úÊó∂Âá∫Èîô: {e}", exc_info=True)

# (get_top_board Âíå get_bottom_board ÂáΩÊï∞‰øùÊåÅ‰∏çÂèò)
async def get_top_board(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_leaderboard(update, context, board_type='top', page=1)

async def get_bottom_board(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_leaderboard(update, context, board_type='bottom', page=1)
