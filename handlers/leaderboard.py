import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes,-
from telegram.constants import ParseMode
from math import ceil

from database import db_fetch_all, get_setting, set_setting, is_admin
from handlers.utils import membership_required # <-- ÂØºÂÖ•Êàë‰ª¨ÁöÑÊ£ÄÊü•Âô®

logger = logging.getLogger(__name__)

PAGE_SIZE = 10
CACHE_SECONDS = 300  # 5ÂàÜÈíüÁºìÂ≠ò

async def get_leaderboard_data(leaderboard_type: str):
    """‰ªéÊï∞ÊçÆÂ∫ìËé∑ÂèñÂπ∂ÁºìÂ≠òÊéíË°åÊ¶úÊï∞ÊçÆ„ÄÇ"""
    cache_key = f"leaderboard_{leaderboard_type}"
    cached_data = context.bot_data.get(cache_key)
    
    if cached_data and (datetime.now() - cached_data['timestamp']).total_seconds() < CACHE_SECONDS:
        logger.info(f"‰ΩøÁî®ÁºìÂ≠òÁöÑ '{leaderboard_type}' ÊéíË°åÊ¶úÊï∞ÊçÆ„ÄÇ")
        return cached_data['data']

    logger.info(f"ÈáçÊñ∞ÁîüÊàê '{leaderboard_type}' ÊéíË°åÊ¶úÊï∞ÊçÆ„ÄÇ")
    
    if leaderboard_type == 'recommend':
        query = """
            SELECT u.username, COUNT(e.pkid) as count
            FROM evaluations e
            JOIN users u ON e.target_user_pkid = u.pkid
            WHERE e.type = 'recommend'
            GROUP BY u.username
            ORDER BY count DESC, u.username
            LIMIT 50;
        """
    elif leaderboard_type == 'block':
        query = """
            SELECT u.username, COUNT(e.pkid) as count
            FROM evaluations e
            JOIN users u ON e.target_user_pkid = u.pkid
            WHERE e.type = 'block'
            GROUP BY u.username
            ORDER BY count DESC, u.username
            LIMIT 50;
        """
    elif leaderboard_type == 'score':
        query = """
            SELECT u.username, 
                   (COUNT(CASE WHEN e.type = 'recommend' THEN 1 END) - COUNT(CASE WHEN e.type = 'block' THEN 1 END)) as score
            FROM evaluations e
            JOIN users u ON e.target_user_pkid = u.pkid
            GROUP BY u.username
            HAVING (COUNT(CASE WHEN e.type = 'recommend' THEN 1 END) - COUNT(CASE WHEN e.type = 'block' THEN 1 END)) != 0
            ORDER BY score DESC, u.username
            LIMIT 50;
        """
    elif leaderboard_type == 'popularity':
        query = """
            SELECT u.username, COUNT(f.pkid) as count
            FROM favorites f
            JOIN users u ON f.target_user_pkid = u.pkid
            GROUP BY u.username
            ORDER BY count DESC, u.username
            LIMIT 50;
        """
    else:
        return []

    data = await db_fetch_all(query)
    context.bot_data[cache_key] = {'data': data, 'timestamp': datetime.now()}
    return data

@membership_required # <-- Ë¥¥‰∏äÊ†áÁ≠æ
async def leaderboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ÂìçÂ∫î /bang ÂëΩ‰ª§ÔºåÊòæÁ§∫ÊéíË°åÊ¶ú‰∏ªËèúÂçï„ÄÇ"""
    await show_leaderboard_menu(update, context)

@membership_required # <-- Ë¥¥‰∏äÊ†áÁ≠æ
async def show_leaderboard_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ÊòæÁ§∫ÊéíË°åÊ¶úÁ±ªÂûãÁöÑÈÄâÊã©ËèúÂçï„ÄÇ"""
    text = "üèÜ **ÊéíË°åÊ¶ú**\n\nËØ∑ÈÄâÊã©ÊÇ®ÊÉ≥Êü•ÁúãÁöÑÊ¶úÂçïÔºö"
    keyboard = [
        [
            InlineKeyboardButton("üëç Êé®ËçêÊ¶ú", callback_data="leaderboard_recommend_1"),
            InlineKeyboardButton("üëé ÈÅøÈõ∑Ê¶ú", callback_data="leaderboard_block_1")
        ],
        [
            InlineKeyboardButton("‚ú® Â£∞ÊúõÊ¶ú", callback_data="leaderboard_score_1"),
            InlineKeyboardButton("‚ù§Ô∏è ‰∫∫Ê∞îÊ¶ú", callback_data="leaderboard_popularity_1")
        ],
        [InlineKeyboardButton("üîô ËøîÂõû‰∏ªËèúÂçï", callback_data="back_to_help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

@membership_required # <-- Ë¥¥‰∏äÊ†áÁ≠æ
async def get_leaderboard_page(update: Update, context: ContextTypes.DEFAULT_TYPE, leaderboard_type: str, page: int):
    """ÊòæÁ§∫ÁâπÂÆöÁ±ªÂûãÊéíË°åÊ¶úÁöÑÊüê‰∏ÄÈ°µ„ÄÇ"""
    query = update.callback_query
    await query.answer()

    data = await get_leaderboard_data(leaderboard_type)

    if not data:
        await query.edit_message_text("Ê≠§Ê¶úÂçïÊöÇÊó∂Ê≤°ÊúâÊï∞ÊçÆÂì¶„ÄÇ", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô ËøîÂõûÊ¶úÂçïÈÄâÊã©", callback_data="leaderboard_menu")]]))
        return

    total_pages = ceil(len(data) / PAGE_SIZE)
    page = max(1, min(page, total_pages))
    offset = (page - 1) * PAGE_SIZE
    page_data = data[offset : offset + PAGE_SIZE]

    titles = {
        'recommend': 'üëç Êé®ËçêÊ¶ú', 'block': 'üëé ÈÅøÈõ∑Ê¶ú',
        'score': '‚ú® Â£∞ÊúõÊ¶ú', 'popularity': '‚ù§Ô∏è ‰∫∫Ê∞îÊ¶ú'
    }
    title = titles.get(leaderboard_type, "ÊéíË°åÊ¶ú")
    
    text = f"**{title}** \\(Á¨¨ {page}/{total_pages} È°µ\\)\n\n"
    rank_start = offset + 1
    
    for i, row in enumerate(page_data):
        username = row['username'].replace('_', '\\_').replace('*', '\\*')
        value = row.get('count') or row.get('score')
        text += f"`{rank_start + i:2d}\\.` @{username} \\- **{value}**\n"
    
    pagination = []
    if page > 1:
        pagination.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"leaderboard_{leaderboard_type}_{page-1}"))
    if page < total_pages:
        pagination.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"leaderboard_{leaderboard_type}_{page+1}"))
    
    keyboard = []
    if pagination:
        keyboard.append(pagination)
    keyboard.append([InlineKeyboardButton("üîô ËøîÂõûÊ¶úÂçïÈÄâÊã©", callback_data="leaderboard_menu")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2)

async def clear_leaderboard_cache(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Áî±ÁÆ°ÁêÜÂëòË∞ÉÁî®ÁöÑÊ∏ÖÈô§ÊéíË°åÊ¶úÁºìÂ≠òÁöÑÂäüËÉΩ„ÄÇ"""
    if not await is_admin(update.effective_user.id):
        await update.callback_query.answer("üö´ ÊÇ®‰∏çÊòØÁÆ°ÁêÜÂëò„ÄÇ", show_alert=True)
        return
        
    for key in list(context.bot_data.keys()):
        if key.startswith("leaderboard_"):
            del context.bot_data[key]
    
    logger.info(f"ÁÆ°ÁêÜÂëò {update.effective_user.id} Â∑≤Ê∏ÖÈô§ÊâÄÊúâÊéíË°åÊ¶úÁºìÂ≠ò„ÄÇ")
    await update.callback_query.answer("‚úÖ ÊâÄÊúâÊéíË°åÊ¶úÁºìÂ≠òÂ∑≤Ê∏ÖÈô§ÔºÅ", show_alert=True)
    
    # Âà∑Êñ∞ÁÆ°ÁêÜÈù¢Êùø
    from handlers.admin import leaderboard_panel
    await leaderboard_panel(update, context)
